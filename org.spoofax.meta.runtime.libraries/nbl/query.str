module nbl/query

imports
  
  nbl/uri
  nbl/entries
  task/core
  
rules // Specific queries

  /**
   * Gets all unique and non-unique definition entries that match the given URI.
   *
   * Example:
   *   <nabl-get-all-definitions> [Entity(), "M", "Bar"] => [Def([Entity(), "M", "Bar"]), ...]
   *
   * @type Def(uri) or "name"{uri} or URI(language, path) -> List(Def(uri))
   */
  nabl-get-all-definitions:
    containsURI -> <nabl-get-unique-nonunique(\uri -> Def(uri)\)> uri
    where
    	uri := <nabl-uri> containsURI
    	
  /**
   * Gets all child definition entries in given URI that match given namespace.
   *
   * Example:
   *   <nabl-get-child-definitions> [Entity(), "M", "Bar"] => [Def([Field(), "a", "M", "Bar"]), ...]
   *
   * @type Def(uri) or "name"{uri} or URI(language, path) -> List(Def(uri))
   */
  nabl-get-child-definitions(|ns):
    containsURI -> [] //<nabl-get-children(|ns)> Def(uri) // TODO: GET CHILDREN DEFINITIONS FROM TASK ENGINE.
    where
    	uri := <nabl-uri> containsURI

  /**
   * Gets a property that matches the kind of value and given URI, or fails if no property is found.
   *
   * Example:
   *   <nabl-get-property(|Size())> Def([Entity(), "Bar"]) => Size(8)
   *
   * @param type Only properties of this kind is returned.
   * @type Def(uri) or "name"{uri} or URI(language, path) -> Prop(uri, kind, value)
   */
  nabl-get-property(|kind) = 
  	nabl-get-all-properties(|kind); Hd
      
  /**
   * Gets all properties that match the kind of value and given URI.
   *
   * Example:
   *   <nabl-get-all-properties(|Size())> Def([Entity(), "Bar"]) => [Size(8), ...]
   *
   * @param kind Only data of this kind is returned.
   * @type Def(uri) or "name"{uri} or URI(language, path) -> List(Prop(uri, kind, value))
   */
  nabl-get-all-properties(|kind):
		containsURI -> <task-get-instruction-result> Prop(uri, kind)
    where
    	uri := <nabl-uri> containsURI
     
  /**
   * Gets all Use entries that match the given URI.
   *
   * Example:
   *   <nabl-get-all-uses> Def([Entity(), "M", "Bar"]) => [Use([Entity(), "M", "Bar"]), ...]
   *
   * @type Def(uri) or "name"{uri} or URI(language, path) -> List(Use(uri))
   */
  nabl-get-all-uses:
    containsURI -> <task-get-instruction-result> Use(uri)
    where
    	uri := <nabl-uri> containsURI

  /**
   * Gets all Alias entries that match the given URI.
   *
   * Example:
   *   <nabl-get-all-aliases> Def([Entity(), "M", "Bar"]) => [[Entity(), "M", "Baz"], ...]
   *
   * @type Def(uri) or "name"{uri} or URI(language, path) -> List(aliasURI)
   */
  nabl-get-all-aliases:
    containsURI -> aliasURI*
    where
    	uri := <nabl-uri> containsURI;
      if nonUniqueURI := <nabl-replace-uri-qualifier(|NonUnique())> uri then
        aliasURI* := <task-get-instruction-result> Alias(nonUniqueURI) 
      else
        aliasURI* := []
      end

  nabl-get-unique-nonunique(create-template):
  	uri -> [unique*, nonUnique*]
  	where
      if alias* := <nabl-get-all-aliases> uri then
        unique* := <map(create-template; task-get-instruction-result)> alias*
      else
        unique* := []
      end;
      if nonUniqueURI := <nabl-replace-uri-qualifier(|NonUnique())> uri then
        nonUnique* := <create-template; task-get-instruction-result> nonUniqueURI
      else
        nonUnique* := []
      end
