module nbl/collect

imports
	
	task/core
	task/tasks
	nbl/tasks
	nbl/entries
	nbl/interface
	nbl/uri
	nbl/utils
	types/interface
	
signature 

	sorts
	
		State DefScope ImplicitDef Use RefScope Range

  constructors // state
  	
  	State : String * Term -> State

	constructors // def

		Current    :            						DefScope
		Subsequent :            						DefScope
		DefScope   : Namespace * Segment -> DefScope

  constructors // use
      
		UseCandidate  : Namespace * List(Property) * RefScope        -> Use
		UseCandidate  : Namespace * Name * List(Property) * RefScope -> Use
	
		Current     :                                     							RefScope
		Surrounding :                                  	 							  RefScope
		Context     : String * Namespace * List(Property) * RefScope -> RefScope
		
    All : Range
    One : Range
    
    Completion : Result -> Completion
	
	constructors // import
	  
	  Imported : Namespace                   -> Namespace
	  Import   : Language * Namespace        -> Property
	  Import   : Language * Namespace * Name -> Property
  	Type     : Property
  	
  constructors // property
    
    Prop : Property * Value * List(Dependency) -> Prop
    
  constructors // partition
  
  	CollectPartition : Partition
	
strategies // generic traversal
	
	/**
	 * Main strategy to collect all index elements and task* from an AST.
	 */
	nabl-collect(|partition, lang):
	  ast -> ast'''
	  where
	    new-hashtable => unique*;
	    ast'   := <nabl-collect(id|lang, partition, unique*, [])> ast ;
	    ast''  := <bottomup(try(type-task(|partition)))> ast';
	    ast''' := <alltd(message-task(|partition))> ast''
	  
	/**
	 * Performs the collection in a topdown traversal. 
	 * At each node, it tries various calls to generated strategies, which call back to generic strategies.
	 */
	nabl-collect(sibling-uris|lang, partition, unique*, uri*) =
		nabl-state-pop(?state*);
		nabl-scope-site(?uri'*|lang, uri*); // scopes of external definitions, e.g. variables in let expressions
		
		(
			 nabl-def-site(?child-uri*, sibling-uris, ?implicit*|lang, partition, unique*, uri'*, state*)
    <+ match(sibling-uris|uri*)
    ;  nabl-anonymous-scope-site(?child-uri*|lang, partition, unique*, uri'*, state*)
    <+ match(?child-uri*|uri'*)
    );
    
		try(nabl-state-site);
		
		preserve-annos(force-origins(id#(nabl-siblings(|lang, partition, unique*, child-uri*)))); // visit children from left to right
		
		try(nabl-use-site(|lang, partition, uri'*, state*));
    try(nabl-import-site(|lang, partition, child-uri*, state*));
    try(nabl-prop-site(|lang, partition, state*, implicit*))
	
	nabl-siblings(|lang, partition, unique*, uri*) = 
		[] + 
		[ nabl-collect(?sibling-uri*|lang, partition, unique*, uri*)
		| nabl-siblings(|lang, partition, unique*, sibling-uri*) ]

rules // generic analysis of state
  
  nabl-state(pattern|state) =
    map(try(nabl-state-annotate(pattern|state)))
      
  nabl-state-annotate(pattern|state) =
    ?pattern; add-annotation(|state)
    
  nabl-state-pop(states'):
  	term{anno*} -> term'
  	where
  		state* := <collect-all(?State(_, _))> anno*;
  		term'  := <remove-annotations(?State(_, _))> term;
  		match(states'|state*)
  		
  nabl-get-state(|name) =
  	fetch-elem(?State(name, _))

rules // generic analysis of scopes
	
	nabl-scope-site(adapted-uris|lang, uri*) =
	  with (
	    get-annotations;
	    collect-all(?DefScope(_, _));
	    foldr(!uri*, nabl-def-scope-site(|lang));
	    match(adapted-uris|<id>)
	  );
	  remove-annotations(?DefScope(_, _))
	  
	nabl-def-scope-site(|lang):
	  (DefScope(ns, uri), uri*) -> uri'*
	  where
      segment := <nabl-uri-path; Hd; nabl-external-segment> uri;
      uri'*   := <update-scope-uri(nabl-extend-uri(|segment)|lang)> (ns, uri*)
      
	nabl-construct-def-scope(|lang, partition, unique*) = 
		!DefScope(<id>, <nabl-base-uri; nabl-extend-uri-anonymous(|unique*, partition)> lang)
	
	nabl-def-scope(|scope) = add-annotation(|scope)
		
	// call back for generic analysis of anonymous scopes
	nabl-anonymous-scope(child-uris|lang, partition, unique*, uri*, ns*) =
		match(child-uris|<extend-scope-uri(nabl-extend-uri-anonymous(|unique*, partition)|lang)> (ns*, uri*))	
	
rules // generic analysis of defs
    	
	// call back to generic analysis
	nabl-def(child-uris, sibling-uris|lang, partition, unique*, child-uri*, sibl-uri*, ns, unique, defscope, scoped):
		a@name{anno*} -> name{d,anno*}
		where
			// get URI for namespace of definition site
			current-uri := <lookup-uri(|lang, ns)> child-uri*;
			switch !defscope
			// in each case we 
			// 1. build URI of the definition site
			// 2. update URIs for children (vertical scope)
			// 3. update URIs for right siblings (horizontal scope)
			case ?Current():
				// 1. extend current URI with ID segment
				// 2. extend URIs of scoped namespaces
				// 3. preserve
				def-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> current-uri;
				match(child-uris|<replace-scope-uri(|def-uri)> (scoped, child-uri*));
			  match(sibling-uris|sibl-uri*)
			case ?[Subsequent()]:
				// 1. extend current URI with Subsequent and ID segment
				// 2. preserve
				// 3. extend URI for namespace of definition site with Subsequent segment
				subs-uri := <nabl-extend-uri-subsequent(|unique*, partition)> current-uri;
				def-uri  := <nabl-extend-uri(|unique*, partition, ns, name, unique)> subs-uri;
	  		match(child-uris|child-uri*);
				match(sibling-uris|<replace-scope-uri(|subs-uri)> ([ns], sibl-uri*))
	  	case ?[DefScope(ns, uri)]:
	  		// 1. extend base URI with External and ID segment
				// 2. preserve
				// 3. preserve
				def-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> uri;
				match(child-uris|child-uri*);
				match(sibling-uris|sibl-uri*)
			case ?[Subsequent(), DefScope(ns, uri)]:
				// 1a. extend base URI with External and ID segment
				// 1b. extend current URI with Subsequent and ID segment
				// 1c. introduce alias from 1b to 1a
				// 2. preserve
				// 3. extend URI for namespace of definition site with Subsequent segment
				def-uri   := <nabl-extend-uri(|unique*, partition, ns, name, unique)> uri;
				subs-uri  := <nabl-extend-uri-subsequent(|unique*, partition)> current-uri;
        alias-uri := <nabl-extend-uri(|unique*, partition, ns, name, unique)> subs-uri;
	  		<new-alias(|partition, def-uri, alias-uri)> a;
	  		match(child-uris|child-uri*);
				match(sibling-uris|<replace-scope-uri(|subs-uri)> ([ns], sibl-uri*))
			end;
			// add Def entry to the index
			d := <new-def(|partition, def-uri)> a
	
rules // generic analysis of uses
	
	// single candidate
	nabl-use(|lang, partition, uri*, candidate) =
		where (<not(is-list)> candidate);
		nabl-use(|lang, partition, uri*, [candidate])
	
	// list of candidates
	nabl-use(|lang, partition, uri*, candidate*):
		name{anno*} -> result
		where
			subtask* := <map(nabl-use-candidate(|lang, partition, uri*, <nabl-fix-name> name))> candidate*;
			choice   := <new-task(|partition)> Choice(subtask*);
		  u        := <new-use(|partition, choice)>;
		  result := name{u, anno*}
		  
	nabl-use-subtasks(disambiguate|partition, ns, name, prop*, range): 
		uri  -> [task|subtasks]
		with
			task := <nabl-use-subtasks-one(disambiguate|partition, ns, name, prop*, range)> uri;
      switch !range
      	case One(): ![]
      	case All(): <nabl-uri-parent < nabl-use-subtasks(disambiguate|partition, ns, name, prop*, range) + ![]> uri
    	end => subtasks
    	
  nabl-use-subtasks-one(disambiguate|partition, ns, name, prop*, range):
		uri  -> disambiguated
		with
			defsTask            := <new-task(|partition)> ResolveDefs(<nabl-use-subtask-uri(|partition)> uri, ns, name);
			namedImportsTask    := <new-task(|partition)> ResolveNamedImports(<nabl-use-subtask-uri(|partition)> uri, ns, name);
			namedDefsTask       := <new-task(|partition)> ResolveDefs(namedImportsTask, ns, name);
			wildcardImportsTask := <new-task(|partition)> ResolveWildcardImports(<nabl-use-subtask-uri(|partition)> uri, ns);
			wildcardDefsTask    := <new-task(|partition)> ResolveDefs(wildcardImportsTask, ns, name);
			
			if ExternalDef(x) := <nabl-uri-path; Hd> uri then
        ext-uri  := <nabl-uri-language; nabl-base-uri; nabl-extend-uri(|Anonymous(x))> uri;
        subtasks := [<new-task(|partition)> ResolveDefs(<nabl-use-subtask-uri(|partition)> ext-uri, ns, name)]
      else
      	subtasks := []
      end;
      
      concatted     := <new-task(|partition)> Concat([defsTask, namedDefsTask, wildcardDefsTask|subtasks]);
      filtered      := <nabl-use-propconstraint(|partition, prop*)> concatted;
      disambiguated := <nabl-use-disambiguate(disambiguate|partition, prop*, ns, name)> filtered
          	
	nabl-use-subtask-uri(|partition) =
		switch id
			case ?URI(_, _) => uri : ![uri]
			case is-list           : <new-task(|partition)> Choice(<id>)
			otherwise              : id
		end 
		  	
	// candidate in current scope
	nabl-use-candidate(|lang, partition, uri*, name):
		UseCandidate(ns, prop*, Current()) -> choice
		where
			uri       := <lookup-uri(|lang, ns)> uri*;
			subtask*  := <nabl-use-subtasks(id|partition, ns, name, prop*, All())> uri; // TODO: only disambiguate if required.
			choice    := <new-task(|partition)> Choice(subtask*)

	// candidate in another scope (result of resolution)	  
	nabl-use-candidate(|lang, partition, uri*, name):
		UseCandidate(ns, prop*, c@Context(ctx-ns, ctx-name, ctx-prop*, ctx-context)) -> choice
		where
			ctx-result := <nabl-use-candidate(|lang, partition, uri*, ctx-name)> UseCandidate(ctx-ns, ctx-prop*, ctx-context);
			subtask*   := <nabl-use-subtasks(id|partition, ns, <nabl-fix-name> name, prop*, One())> ctx-result; // TODO: only disambiguate if required.
			choice    := <new-task(|partition)> Choice(subtask*)
			
	nabl-use-propconstraint(|partition, prop*):
		task -> result
		where
			if not([] := prop*) then
				result := <new-task(|partition)> PropConstraint(prop*, task)
			else
				result := task
			end	

	nabl-use-disambiguate(disambiguate|partition, prop*, namespace, name):
		task -> result
		where
			disambiguate;
			result := <new-task(|partition)> DisambiguateDefs(task, prop*, namespace, name)
    
rules // generic analysis of imports
  
  nabl-import(|lang, partition, uri*, imports):
    name -> name'
    where
    	Use(use) := <nabl-collect-use> name;
      name'    := <foldl(nabl-import-candidate(|lang, partition, uri*, use))> (imports, name)
        
  nabl-import-candidate(|lang, partition, uri*, use):
    (import, name) -> name
    where
      ns  := <nabl-import-namespace> import;
      uri := <lookup-uri(|lang, ns)> uri*;
      new-prop(|partition, uri, import, use)
      
  nabl-import-namespace =
       ?Import(_, Imported(<id>)) 
    <+ ?Import(_, <id>)
    <+ ?Import(_, Imported(<id>), _)
    <+ ?Import(_, <id>, _) 

rules // generic analysis of properties
  
  // call back to generic analysis
	nabl-props(|partition, prop*):
	  name -> name'
	  where
	    Def(uri) := <nabl-collect-def> name;
		  name'    := <foldl(extend-prop(|partition, uri))> (prop*, name)
		
	extend-prop(|partition, uri):
		(Prop(type, result, dep*), name) -> name
		where
		  prop := <new-prop(|partition, uri, type, result)> name
        
rules // name retrieval
  
  nabl-name = is-string
  
  nabl-name-apply(s) = is-string; s
    
  nabl-fix-name = try(fix-completion-name); strip-annos
  
rules // URI retrieval
  
  nabl-collect-def =
    nabl-name;
    get-annos;
    collect-one(?Def(_))
    
  nabl-collect-all-def =
    nabl-name;
    get-annos;
    collect-all(?Def(_))
    
  nabl-collect-use =
    nabl-name;
    get-annos;
    collect-one(?Use(_))
    
  nabl-collect-all-use =
    nabl-name;
    get-annos;
    collect-all(?Use(_))
    
  nabl-collect-completion =
    get-annos;
    collect-one(?Completion(_))
    
  nabl-collect-all-completion =
    get-annos;
    collect-all(?Completion(_))

rules // helpers
	
	replace-scope-uri(|path) = foldl(update-scope-uri(!path|<nabl-uri-language> path))
  extend-scope-uri(s|lang) = foldl(update-scope-uri(s|lang))
  
	update-scope-uri(update|lang):
		(key, uri*) -> result
		where
		  result := <fetch((?key, update))> uri* 
		<+ 
		  result := [(key, <nabl-base-uri; update> lang)|uri*]
			  
	lookup-uri(|lang, ns):
	  uri* -> <<lookup> (ns, uri*) <+ <nabl-base-uri> lang>
