module nbl/tasks

imports 
  
  task/core
  nbl/lookup
  nbl/collect
  nbl/query
  nbl/interface
  nbl/uri
  nbl/utils
  nbl/entries
  
signature
  
  constructors
    
    ResolveDefs            : Scope * Namespace * Name                  -> Instruction
    DisambiguateDefs       : List(Def) * List(Prop) * Namespace * Name -> Instruction
    ResolveNamedImports    : Scope * Namespace * Name                  -> Instruction
    ResolveWildcardImports : Scope * Namespace                         -> Instruction
    ImportCalc             : URI                                       -> Instruction
    ImportClosure          : URI                                       -> Instruction
    PropConstraint         : List(Prop) * List(Result)                 -> Instruction
    PropCalc               : Property * Term                           -> Instruction
        
    ResolveAllDefs            : Scope * Namespace                  -> Instruction
        
rules // Resolve
  
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveDefs(scope*@<with(is-list|"Expected a list of scopes.")>, ns, name) -> result
  	where
  		uri*  := <filter(nabl-uri)> scope*;
  		name' := <try-remove-list; strip-annos> name; // Name could be a list, and annotated.
  		def*  := <nabl-lookup(|ns, name')> uri*;
  		<map(nabl-add-read-extend(|nr, ns, name'))> uri*;
  		switch !def*
        case ?[]:
        	fail
        otherwise: 
        	!def* // TODO: id?
			end => result

	// Calls a user-defined disambiguation filter on definitions with relevant information.
	perform-task(|nr):
		DisambiguateDefs(def*, prop*, namespace, name) -> result
		where
			if <Tl> def* then
				result := <try(nabl-disambiguate(|prop*, namespace, name))> def*
			else
				switch !def*
	        case ?[]:
	        	fail
	        otherwise: 
	        	!def* // TODO: id?
				end => result
			end

	// Looks up named imports, active in scopes with namespace and name..
	perform-task(|nr):
		ResolveNamedImports(scope*@<with(is-list|"Expected a list of scopes.")>, ns, name) -> result
		where
			uri*    := <filter(nabl-uri)> scope*;
			name'   := <try-remove-list; strip-annos> name; // Name could be a list, and annotated.
			import* := <nabl-lookup-named-import(|ns, name')> uri*;
			<map(nabl-add-read(|nr))> uri*;
      if <task-has-dependencies> import* then
      	result := <task-collect-dependencies> import*
      else
	      switch !import*
	        case ?[]:
	        	fail
	        otherwise: 
	        	!import* // TODO: id?
				end => result
      end
	
	// Looks up wildcard imports for a namespace active in scopes.
	perform-task(|nr):
		ResolveWildcardImports(scope*, ns) -> result
		where
			uri*        := <filter(nabl-uri)> scope*;
			import-uri* := <mapconcat(resolve-one-wildcard-import(|nr, ns))> uri*;
      switch id
      	case task-collect-dependencies => d : !d
      	case ?[]                            : fail
      	otherwise                           : id
      end => result
			
	resolve-one-wildcard-import(|nr, ns):
		uri -> result
		where
			if task-exists(|ImportClosure(uri)) then
				import-closure-id := <task-instruction-id> ImportClosure(uri);
				switch id
					case task-has-failed                                  : <task-add-dependency-nocycle(|nr)> import-closure-id; ![]
					case task-get-result => h                             : <task-add-dependency-nocycle(|nr)> import-closure-id; <Hd; hashtable-get(|ns)> h
					case not(task-becomes-cyclic(|nr, import-closure-id)) : ![<task-create-dependency> import-closure-id]
					otherwise                                             : ![]
				end => result
			else
				result := []
			end;
			<nabl-add-read(|nr)> uri

rules // Visibility
	
  // Looks up defintions in scopes with namespace and name.
  perform-task(|nr):
  	ResolveAllDefs(scope*@<with(is-list|"Expected a list of scopes.")>, ns) -> result
  	where
  		uri*  := <filter(nabl-uri)> scope*;
  		def*  := <nabl-lookup-all(|ns)> uri*;
  		//<map(nabl-add-read-extend(|nr, ns, name'))> uri*;
  		switch !def*
        case ?[]:
        	fail
        otherwise: 
        	!def* // TODO: id?
			end => result	

rules // Import calculation
	
	// Import calculation.
	perform-task(|nr):
		ImportCalc(uri) -> result
		where
			import-ns-use*        := <nabl-get-all-properties(|Import())> uri;
			(imported-uri*, uri*) := <partition(resolve-transitive-import, resolve-import)> import-ns-use*;
  		switch id
        case d := <task-collect-dependencies> : !d
        otherwise                             : ![<id>]
			end => result;
			<nabl-add-read(|nr)> uri

	resolve-transitive-import: (Imported(ns), use) -> (ns, <resolve-import-use> use)
	resolve-import: (ns, use) -> (ns, <resolve-import-use> use)
	resolve-import-use = task-get-solved; filter(nabl-uri) <+ task-create-dependencies
	
	// Import transitive closure calculation.
	perform-task(|nr):
		ImportClosure(uri) -> result
		with
			import-calc-id        := <task-instruction-id> ImportCalc(uri);
			(imported-uri*, uri*) := <task-get-result; Hd> import-calc-id; // Result for this task must exit, as a dependency is expressed on it during collect.
			hashtable             := <new-hashtable>;
			<map(import-to-hash-table(|hashtable))> uri*;
			d* := <collect-all(?URI(_, _)); mapconcat(import-closure-transitive(|nr, hashtable))> imported-uri*;
			switch id
				case task-collect-dependencies => d : !d
				otherwise                           : ![hashtable]
			end => result;
			<nabl-add-read(|nr)> uri
			
	import-to-hash-table(|hashtable):
		(ns, import-uri*) -> <hash-multimap-putlist(|ns, import-uri*)> hashtable
		
	import-closure-transitive(|nr, hashtable):
		uri	-> result
		with
			if task-exists(|ImportClosure(uri)) then
				import-closure-id := <task-instruction-id> ImportClosure(uri);
				switch id
					case task-has-failed                                  : <task-add-dependency-nocycle(|nr)> import-closure-id; ![]
					case task-get-result; Hd => h                         : <task-add-dependency-nocycle(|nr)> import-closure-id; <hash-multimap-copy(|h)> hashtable; ![]
					case not(task-becomes-cyclic(|nr, import-closure-id)) : ![<id>]
					otherwise                                             : ![]
				end => result
			else
				result := []
			end;
			<nabl-add-read(|nr)> uri

rules // Property constraints
	  
  perform-task(|nr):
  	PropConstraint(prop*, res*) -> result
  	where
  		filtered := <filter(nabl-resolve-constraint(|prop*))> res*;
      switch !filtered
      	case task-collect-dependencies => d: !d
      	case ?[] : fail
      	otherwise: !filtered // TODO: id?
      end => result
  		
  nabl-resolve-constraint(|prop*):
    entry -> entry'
    where
      filtered := <filter(nabl-resolve-constraint-one(|entry))> prop*;
      switch !filtered
      	case ?[]: fail
      	case task-collect-dependencies => d: !d
      	otherwise: !entry
      end => entry'
      
  // TODO: check dependencies (3rd subterm) as well.
  nabl-resolve-constraint-one(|entry):
    Prop(type, expectedValue, _) -> entry'
    where
    	uri   := <nabl-uri> entry;
      value := <nabl-get-property(|type)> uri;
      if value' := <insert-results> value then
        expectedValue' := <insert-results> expectedValue;
        <nabl-property-eq(|type) <+ eq> (expectedValue', value');
        entry' := entry
      else
        entry' := <task-create-dependencies> value
      end

rules // Property calcuation

  perform-task(|nr): 
  	PropCalc(prop, term) -> result'
  	where
  		result := <calc-property> (prop, term);
  		switch !result
  			case task-collect-dependencies => d : !d
      	case not(is-list)                   : ![result]
      	otherwise                           : !result
			end => result'

rules // Utility
	
	nabl-add-read(|nr) = try(nabl-replace-uri-qualifier(|())); task-add-read(|nr)
	nabl-add-read-extend(|nr, ns, name) = nabl-extend-uri(|ns, name, ()); task-add-read(|nr)
