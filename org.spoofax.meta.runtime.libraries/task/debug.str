module task/debug

imports
	
	task/core
	task/legacy-task-creation

signature

	constructors
		
		Debug : Term * Term -> Instruction

rules
	
	task-transitive-dependencies = task-transitive-dependencies(|[])
	
	task-transitive-dependencies(|seen):
		taskID -> [dep*, trans-dep*]
		where
			not(<elem> (taskID, seen));
			dep*       := <task-get-dependencies> taskID;
			trans-dep* := <mapconcat(task-transitive-dependencies(|[taskID|seen]))> dep*
			
	task-transitive-dependencies(|seen):
		taskID -> []
		where
			<elem> (taskID, seen)
			
rules
	
	task-debug-ast:
		ast -> debug*
		with
			resultID* := <task-collect-result-ids> ast;
			dep*      := <mapconcat(task-transitive-dependencies)> resultID*;
			debug*    := <make-set; map(task-debug-info(|<id>))> [resultID*, dep*]

rules
	
	task-debug(|ctx):
		term -> <new-task(|ctx)> Debug("", term)
		
	task-debug(|ctx, prefix):
		term -> <new-task(|ctx)> Debug(prefix, term)
		
	task-is-combinator = ?Debug(_, _)

	perform-task(|nr):
		Debug(prefix, term) -> <debug(!$[[nr] - [prefix]]); !term> msg
		with
			if <?[]> term then
			  msg := "FAIL"
			else
			  msg := term
			end
		