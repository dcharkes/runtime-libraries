module task/core

imports 
  
  task/interface
  task/utils
  
signature

  sorts
  
    FutureResult Result Instruction
  
  constructors
    
    Result : Int -> FutureResult
    
    Dependency : List(Int)      -> Result
    Single     : List(Result)   -> Result
    Error      : Term * Message -> Result
    Warning    : Term * Message -> Result
    Note       : Term * Message -> Result
		
rules // Creation
  
  new-task(|partition) = new-task(|partition, <dependent-tasks>)
  new-task(|partition, dependencies) = desugar-task(|partition) <+ task-add-task(|partition, dependencies, <id>)
      
  dependent-tasks = collect-all(dependent-task, union); flatten-list; make-set
  dependent-task = ?Result(<id>) 
  dependent-task =
    has-annos; get-annos; dependent-tasks

rules // Dependencies
	
  task-create-dependencies =
  	collect-all(?Result(<id>));
  	!Dependency(<id>)
  	
	task-has-dependencies =
		fetch(?Dependency(_))
		
	task-collect-dependencies =
		collect-all(?Dependency(<id>));
		concat;
		where(Hd);
		!Dependency(<id>)

rules // Results
	
	insert-results-hashmap(|results-hashmap) =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results-hashmap(|results-hashmap)>); set-annos
			case is-list    : filter(insert-results-hashmap(|results-hashmap); not(?[]))
			case ?Result(n) : (<hashtable-get(|n)> results-hashmap) <+ <with(fail|"Cannot insert result: ")> n
			otherwise       : all(insert-results-hashmap(|results-hashmap))
		end
	
	insert-results =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results>); set-annos
			case is-list    : map(insert-results); remove-all(?[])
			case ?Result(n) : task-api-get-results(|n) <+ (task-api-has-failed(|n); ![])
			otherwise       : all(insert-results)
		end
		
	insert-results-or-create-dependency =
		switch id
			case has-annos  : !(<id>, <get-annos; insert-results-or-create-dependency>); set-annos
			case is-list    : map(insert-results-or-create-dependency); remove-all(?[])
			case ?Result(n) : task-api-get-results(|n) <+ (task-api-has-failed(|n); ![]) <+ !Dependency([n])
			otherwise       : all(insert-results-or-create-dependency)
		end
	
rules // Projections
	
	task-result-id:
    Result(taskID) -> taskID

	task-collect-result-ids =
		collect-all-annos(task-result-id, union) 

rules // API
	
	task-setup(|project-path)                            = task-api-setup(|project-path)
	task-start-collection(|partition)                    = task-api-start-collection(|partition)
	task-stop-collection(|partition)                     = task-api-stop-collection(|partition)
	task-add-task(|partition, dependencies, instruction) = task-api-add-task(|partition, dependencies, instruction)
	task-evaluate(|changed-read*)                        = task-api-evaluate(task-collect-result-ids, insert-results-hashmap, perform-task|changed-read*)
	task-reset                                           = task-api-reset
	task-persist                                         = task-api-persist
	task-unload(|project-path)                           = task-api-unload(|project-path)
	
	task-get-results =
		switch id
			case ?Result(taskID) : task-api-get-results(|taskID)
			otherwise            : task-api-get-results(|<id>)
		end
	
	task-has-failed =
		switch id
			case ?Result(taskID) : task-api-has-failed(|taskID)
			otherwise            : task-api-has-failed(|<id>)
		end
		
	task-get-solved =
		switch id
			case ?Result(taskID) : task-api-get-results(|taskID) <+ (task-api-has-failed(|taskID); ![])
			otherwise            : task-api-has-failed(|<id>) <+ (task-api-has-failed(|<id>); ![])
		end
				
	task-add-read(|taskID):
		read -> <task-api-add-read(|taskID, read)>

rules /** @internal API externals */

	external task-api-setup(|project-path)
	external task-api-start-collection(|partition)
	external task-api-stop-collection(|partition)
	external task-api-add-task(|partition, dependencies, instruction)
	external task-api-get-results(|taskID)
	external task-api-has-failed(|taskID)
	external task-api-add-read(|taskID, read)
	external task-api-evaluate(collect-results, insert-results, perform-task|changed-reads)
	external task-api-reset(|)
	external task-api-persist(|)
	external task-api-unload(|project-path)
